第二章:c语言概述
2.2.	根据C11标准,C语言有6种语句:标号语句,复合语句,表达式语句,选择语句,迭代语句,跳转语句(关键字,标识符,运算符,数据)
2.2.1	int main(void) 里面的void和int都是标准ANSI C定义main()的一部分(如果使用ANSI C之前的编译器,请省略void;考虑到兼容的问题,尽量使用新的编译器)
		/*C程序*/  这是C语言的注释格式
		printf()是标准的C库函数;
		return 0; /*C函数可以给调用方返回一个数,目前可暂时把这行看作是结束main()函数的要求.
2.2.2	#include 预处理器指令(preprocessor directive)
		通常在C程序顶部的信息集合被称为头文件(header)
		大多数情况下,头文件包含了编译器创建最终可执行程序要用到的信息.例如头文件可以定义一些常量,或者指明函数名以及如何使用它们,但是函数的实际代码
		在一个预编译代码的库文件中,简而言之,头文件帮助编译器把你的程序正确地组合在一起.
		#include中的#符号表明,C预处理器在编译器接手之前处理这条指令
		main() , void main() , main(void)   尽量用第三种格式
		用 // 注释 比用 /*...*/  注释,可以防止代码消失的问题(删除的时候让代码变成了注释)
		分号在C语言中是大部分语句和声明的一部分,不像在Pacscal中只是语句间的分隔符
		在C语言中,所有变量都必须先声明才能使用.                                                                      
		如果变量名无法清楚地表达自身的用途,可以在注释中进一步说明,这是一种良好的编程习惯和编程技巧.
		可以用小写字母,大写字母,数字和下划线来命名,但是名称的第一个字符必须是字符或者下划线,不能是数字
		标准标签都以一个或者两个下划线字符开始,如库标识符.尽量避免自己程序中使用这种名称.即使没有语法错误,也会导致名称冲突.
		如果事先未声明变量,那么C程序无法通过编译
		printf("*****")圆括号内的内容是从main()函数传递给printf()函数的信息,里面的*****被称为实际参数(actual argument)
		实际参数是传递给函数的特定值,而形式参数是函数从中用于储存值的变量.
		C语言是通过赋值运算符而不是赋值语句完成赋值操作的,所谓的赋值语句实际上是表达式语句.(C标准里面没有所谓的"赋值语句")
		\r  \n 的区别:
		\r: return 到当前行的最左边;
		\n: newline 向下移动一行,并不移动左右;
		linux中用\n表示回车+换行;
		window中用\r\n表示回车加换行;
		mac中用\r表示回车加换行
		\t表示tab键
		\b表示Backspace退格键
		printf("My favourite number is %d because it is first")  里面的%d相当于一个占位符  %提醒程序,要在该处输出一个变量,d表明把变量作为十进制整数输出   
		printf中的f提醒用户这是一种格式化打印函数  (format)
		如果遗漏了main()函数中的return语句,程序在运行至最外面的右花括号(})时会返回0,因此可以省略return语句,但是不要在其他有返回值的函数中遗漏它.强烈建议
		养成在main()函数中保留return语句,可以看作是统一代码风格,对某些操作系统(包括linux和UNIX),return语句有实际用途
2.3
		函数由函数头和函数体组成,函数头包含函数名,传入该函数的信息类型和函数的返回类型.同过函数名后面的圆括号可识别出函数.
		函数头指的是 int main()
2.4		提高程序可读性的技巧是:
		1.择有意义的函数名和写注释. 
		2.空行分隔声明部分和程序的其他部分如:
		  #include<stdio.h>
		  
		  int main(void)
		  {
			printf("1");
			return 0;
	b	 }
		 
		3.每条语句各占一行(C语言并没有这样要求,但是方便查看程序)
		**函数调用本身是一个表达式,圆括号是运算符,圆括号左边的函数名是运算对象,在C11标准中,这样的表达式市一中后缀表达式,在表达式的末尾加上分号,就成了表达式语句.
2.5.4	printf("There are %d feet in %d fathoms",feet,fathoms);
		待输出的变量位于双引号的后面,而且变量之间还要用逗号隔开./*双引号的部分和后面变量之间要用逗号隔开.*/
2.6		函数定义即是函数本身的源代码
		void butler(void)函数原型指明了函数的属性,如butler()函数原型中的第一个void表明,butler()没有返回值(通常,被调的函数会向主调函数返回一个值,但是butler()没有)
		butler(void)中的void表明butler()函数不带参数.因此,编译器运行至此,会检查butler()使用是否得当,注意的是,void在这里的意思是"空的",而不是"无效"
		无论main()在程序文件中处于什么位置,所有的C程序都从main()开始执行.但是C的惯例是把main()放在开头,因为它提供了程序的基本框架.而把butler()函数的定义放在main()
		函数后面
		include 是文件包含命令,其意义是把它后面用<>或者""内指定的文件包含到本程序来(双引号和方括号里面的是头文件,以.h为后缀名,里面包含了相关标准库函数的函数原型
		因此,凡是在程序中调用一个库函数,就必须包含该函数原型所在的头文件)
		有时不用把编译器所报告的错误逐一修正,仅修正第一条或者几处错误后,错误信息就会少很多
2.8		如果用关键字不当,如用关键字作为变量名,编译器会将其视为语法错误.
		同时保留标识符也不能随便用来当变量名之类的,尽管它们是有效的名称,不会引起语法错误,但是也会导致一些其他的问题.保留标识符包括那些以下划线字符开头的标识符和
		标准库函数,如printf()
2.9		即使一个很小的c程序也要用大量的机器语言来表示,可以把1KB的源文件创建成60KB的可执行文件
		/*作为一个程序员,你要做的是,在符合C标准的编译器框架中,表达你希望程序应该如何完成任务的想法*/
2.10 	关键字是C语言的词汇
2.11	复习题
		1.C语言的基本模块是函数头和函数体
		2.语法错误就是不符合C语言的语法规则,英语例子:I am in here eat breakfast   C语言例子:printf("I am eating breakfast here\n") 语句后面没有加上分号";"
		3.语义错误指的是意思上的错误  英语例子:2 is multiplied by 2 equal to 3    
		C语言例子:
		#include<stdio.h>
		
		int main(void)
		{
			int n, m;
			n=2;
			m=n*n*n;
			printf("%d is multiplied by %d equal to %d",n,n,m);
			return 0;
		}
		4.修改后的程序如下:
		#include<stdio.h>
		
		int main(void)/*该程序打印一年有多少周*/
		{
			int s;
			s=56;
			printf("There are %d weeks in a year.",s);
			return 0;
		}
		5.
		a.Baa Baa Black Sheep.Have you any wool?
		b.Begone!
		  O creature of lard!
		c.What?
		  No/nfish?
		d.2+2=4
		6.
		main int char 
		7.
		#include<stdio.h>
		
		int main(void)
		{
			int n,m;
			n=3020;
			m=350;
			printf("There were %d words and %d lines.\n",n,m);
			return 0;
		}
		8.
		执行完第7行后,状态是:定义两个变量a,b,之后将5赋值给a,将2赋值给b
		执行完第8行后,状态是:将a的值赋值给b
		执行完第9行后,状态是:将b的值赋值给a
		原题的程序会造成b=3的值没被用过,clion提示是"The value is never used"虽然这不影响编译成功与否
		9.
		执行完第7行后,状态是:定义两个变量x,y,之后将10赋值给x,将5赋值给y
		执行完第8行后,状态是:将X+y的值赋值给y
		执行完第9行后,状态时:将x*y的值赋值给x
2.12
		1.
		第一次:
		#include<stdio.h>
		
		int main(void)
		{
			printf("edin wu");
			return 0;
		}
		第二次:
		#include<stdio.h>
		
		int main(void)
		{
			printf("edin\nwu");
			return 0;
		}
		第三次第四次:
		#include<stdio.h>
		
		int main(void)
		{
			printf("edin ");
			printf("wu");
			return 0;
		}
		2.
		#include<stdio.h>
		
		int main(void)
		{
			printf("My name is edin wu\n");
			printf("My address is American");
			return 0;
		}
		3.
		#include<stdio.h>
		
		int main(void)
		{
			int x,y;/*x代表年龄,y代表天数*/
			x=20;
			y=x*365;
			printf("age:%d,days:%d",x,y);
			return 0;
		}
		4.
		#include<stdio.h>
		
		void jolly(void);
		void deny(void);
		int main(void)
		{
			jolly();
			jolly();
			jolly();
			deny();
			return 0;
		}
		void jolly(void)/*最左边的void表示没有返回值,所以不用加return语句*/
		{
			printf("For he's a jolly good fellow!\n");
		}
		void deny(void)
		{
			printf("Which nobody can deny!");
		}
		5.
		#include<stdio.h>

		void br(void);
		void ic(void);
		int main(void)
		{
		br();
		printf(",");
		ic();
		ic();
		br();
		getchar();
		return 0;
		}
		void br(void)
		{
		printf("Brazil,Russia");
		}
		void ic(void)
		{
		printf("India,China\n");
		}
		6.
		


			